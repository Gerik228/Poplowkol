### **Итоговая инструкция по логированию входа/выхода в APEX 23.1**

---

#### **1. Учет особенностей версии APEX 23.1**
- **Безопасность:**  
  В APEX 23.1 улучшена защита через `Referrer-Policy` и обработка символов в элементах приложения . Убедитесь, что RESTful Service настроен без лишних ограничений (например, отключите аутентификацию для тестирования).
- **Производительность:**  
  Используйте индексы для таблицы логов и минимизируйте количество запросов к базе данных .
- **RESTful Service:**  
  APEX 23.1 поддерживает работу с JSON через `ORDS` с автоматическим парсингом тела запроса . Убедитесь, что MIME-тип `application/json` разрешён.

---

#### **2. Создание таблицы логов**
```sql
-- Таблица для хранения логов
CREATE TABLE page_visit_log (
    log_id          NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username        VARCHAR2(255),
    item_value      VARCHAR2(4000),
    login_time      TIMESTAMP,
    logout_time     TIMESTAMP
);

-- Индексы для оптимизации запросов
CREATE INDEX idx_username ON page_visit_log(username);
CREATE INDEX idx_item_value ON page_visit_log(item_value);
```

---

#### **3. Настройка RESTful Service (ORDS)**
**Путь:** `/log-logout`  
**Метод:** `POST`  
**Настройки:**
- **Authentication:** `None` (для тестирования) или OAuth 2.0 (для production).
- **MIME Types Allowed:** `application/json`.
- **PL/SQL Source:**
```plsql
DECLARE
    l_body CLOB := :body_text;
    l_username VARCHAR2(255);
    l_item_value VARCHAR2(4000);
BEGIN
    -- Парсинг JSON из тела запроса
    l_username := JSON_VALUE(l_body, '$.username');
    l_item_value := JSON_VALUE(l_body, '$.itemValue');

    -- Обновление лога
    UPDATE page_visit_log
    SET logout_time = SYSTIMESTAMP
    WHERE username = l_username
      AND item_value = l_item_value
      AND logout_time IS NULL;

    -- Ответ 204 No Content
    ORDS.SET_STATUS(204);
END;
```

---

#### **4. JavaScript для отслеживания выхода**
Добавьте в `Page Attributes → JavaScript → Execute when Page Loads`:
```javascript
(function() {
    const ITEM_NAME = "P66_IFRAME_ID"; // Замените на ваш Item
    const USERNAME = "#APP_USER";

    function sendLogoutRequest(trigger) {
        const payload = {
            username: USERNAME,
            itemValue: apex.item(ITEM_NAME).getValue(),
            trigger: trigger
        };

        // Приоритет: fetch с keepalive
        fetch('/ords/web_rnd/log/log-logout', {
            method: 'POST',
            body: JSON.stringify(payload),
            keepalive: true,
            headers: {'Content-Type': 'application/json'}
        }).catch(() => {
            // Резерв: navigator.sendBeacon (без Blob для Safari)
            const params = `username=${USERNAME}&itemValue=${apex.item(ITEM_NAME).getValue()}`;
            navigator.sendBeacon('/ords/web_rnd/log/log-logout', params);
        });
    }

    // Событие закрытия вкладки/браузера
    window.addEventListener('beforeunload', () => {
        sendLogoutRequest('beforeunload');
    });

    // Событие скрытия страницы (переключение вкладок)
    document.addEventListener('visibilitychange', () => {
        if (document.visibilityState === 'hidden') {
            sendLogoutRequest('visibilitychange');
        }
    });

    // Обработка навигации в APEX
    $(document).on('apexafterclosedialog apexafterrefresh', () => {
        sendLogoutRequest('apex_navigation');
    });
})();
```

---

#### **5. Логирование входа**
**Page Process → Page Load:**
```plsql
INSERT INTO page_visit_log (username, item_value, login_time)
VALUES (
    v('APP_USER'), 
    :P66_IFRAME_ID, -- Замените на ваш Item
    SYSTIMESTAMP
);
```

---

### **Тестирование и отладка**
1. **Вход на страницу:**
   - Откройте страницу → Проверьте запись в `page_visit_log`.
2. **Выход:**
   - Закройте вкладку/перейдите на другую страницу → Проверьте обновление `logout_time`.
3. **Ошибка CORS:**
   - Убедитесь, что URL в `fetch` и `sendBeacon` совпадает с доменом APEX.
4. **ORDS:**
   - Проверьте, что RESTful Service доступен без ошибок (статус 204).

---

### **Важные замечания**
1. **Безопасность:**  
   Для production настройте OAuth 2.0 в RESTful Service .
2. **Совместимость с Safari:**  
   Используйте `navigator.sendBeacon` без `Blob`, если возникают ошибки .
3. **Логирование ошибок:**  
   Добавьте таблицу `error_log` для отладки:
   ```sql
   CREATE TABLE error_log (id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, message CLOB, log_time TIMESTAMP);
   ```
4. **Производительность:**  
   Используйте индексы и регулярно очищайте старые записи через триггер:
   ```sql
   CREATE OR REPLACE TRIGGER cleanup_old_logs
   BEFORE INSERT ON page_visit_log
   BEGIN
       DELETE FROM page_visit_log 
       WHERE login_time < SYSTIMESTAMP - 30; -- Хранение 30 дней
   END;
   ```