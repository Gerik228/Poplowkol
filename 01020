<script>
(function () {
  const logId = $v('P66_LOG_ID');
  if (!logId) return;

  const logoutUrl = '/ords/web_rnd/log/log-logout/' + logId;
  let sent = false;

  function sendLogout() {
    if (sent || !logId) return;

    try {
      const beaconSuccess = navigator.sendBeacon(logoutUrl, 'x');
      if (beaconSuccess) {
        sent = true;
        console.log('[LOGOUT] Beacon sent');
        return;
      }

      // Fallback: fetch if beacon fails
      console.warn('[LOGOUT] Beacon failed, fallback to fetch');
      fetch(logoutUrl, {
        method: 'POST',
        keepalive: true,
        credentials: 'same-origin',
        headers: { 'Content-Type': 'text/plain' },
        body: 'x'
      }).then(() => {
        sent = true;
        console.log('[LOGOUT] Fallback fetch sent');
      }).catch(err => {
        console.error('[LOGOUT] Fetch failed', err);
      });

    } catch (e) {
      console.error('[LOGOUT] Exception in sendLogout:', e);
    }
  }

  // Сценарий 1: переход по APEX (включая кнопку "Назад")
  document.addEventListener('apexnavigationbegin', function (evt) {
    if (!evt.detail || typeof evt.detail.defer !== 'function') {
      sendLogout();
      return;
    }

    evt.detail.defer(function (resume) {
      const result = navigator.sendBeacon(logoutUrl, 'x');
      if (result) {
        sent = true;
        console.log('[LOGOUT] Beacon in navigation');
        setTimeout(resume, 120);
      } else {
        fetch(logoutUrl, {
          method: 'POST',
          keepalive: true,
          credentials: 'same-origin',
          headers: { 'Content-Type': 'text/plain' },
          body: 'x'
        }).then(() => {
          sent = true;
          console.log('[LOGOUT] Fallback fetch in navigation');
        }).catch(err => {
          console.error('[LOGOUT] Navigation fetch error:', err);
        }).finally(() => setTimeout(resume, 120));
      }
    });
  });

  // Сценарий 2: вкладка скрыта / переключение / закрытие
  window.addEventListener('pagehide', sendLogout);
  window.addEventListener('beforeunload', sendLogout);
  document.addEventListener('visibilitychange', () => {
    if (document.visibilityState === 'hidden') {
      sendLogout();
    }
  });

  // Сценарий 3: таймаут бездействия (5 минут)
  let idleTimer;
  function resetIdleTimer() {
    clearTimeout(idleTimer);
    idleTimer = setTimeout(() => {
      console.warn('[LOGOUT] Timeout triggered');
      sendLogout();
    }, 300000); // 5 мин
  }

  ['click', 'mousemove', 'keydown', 'scroll', 'touchstart'].forEach(evt =>
    document.addEventListener(evt, resetIdleTimer, { passive: true })
  );

  resetIdleTimer(); // Стартуем таймер
})();
</script>