Ниже — итоговые, проверенные фрагменты кода, которые нужно вставить в соответствующие места. Все имена и пути совпадают с теми, которые вы уже создали (WEB_RND, модуль LOG_AUDIT, базовый путь /log/, шаблон log-logout/:log_id).


---

1  Таблица журнала

CREATE TABLE page_visit_log (
  log_id      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  username    VARCHAR2(255),
  item_value  VARCHAR2(4000),
  login_time  TIMESTAMP DEFAULT SYSTIMESTAMP,
  logout_time TIMESTAMP
);


---

2  Элементы страницы (Page Items)

Item	Тип	Примечание

P_LOG_ID	Hidden	ID вставленной записи
P_ITEM_VAL	Hidden	(опц.) копия вашего фильтра P66_IFRAME_ID



---

3  Process «Log IN» — Point → Before Header

/* Сохраняем значение фильтра, если нужно */
:P_ITEM_VAL := :P66_IFRAME_ID;

/* Вставляем строку в лог и возвращаем log_id */
INSERT INTO page_visit_log(username, item_value, login_time)
VALUES (:APP_USER, :P_ITEM_VAL, SYSTIMESTAMP)
RETURNING log_id INTO :P_LOG_ID;

COMMIT;        -- фиксация сразу, чтобы ID был доступен клиенту


---

4  ORDS-handler «LOG_LOGOUT»

Модуль — LOG_AUDIT
URI Template — log-logout/:log_id
HTTP Method — POST
Mime Types Allowed — text/plain

BEGIN
  UPDATE page_visit_log
     SET logout_time = SYSTIMESTAMP
   WHERE log_id      = :log_id
     AND logout_time IS NULL;

  COMMIT;
  ORDS.set_status(204);          -- No Content
END;

(Этим кодом мы не принимаем тело запроса, нам нужен только :log_id из URL.)


---

5  JavaScript — Execute when Page Loads

(function () {
  /* подключаем один раз */
  if (window._logoutHookAdded) return;
  window._logoutHookAdded = true;

  /* отправка beаcon-запроса */
  function sendLogout() {
    if (window._logoutSent) return;           // не повторяем
    window._logoutSent = true;

    const id = $v('P_LOG_ID');                // лог-ID из hidden item
    if (!id) return;

    const url = '/ords/web_rnd/log/log-logout/' + id;
    navigator.sendBeacon(
      url,
      new Blob(['x'], { type: 'text/plain' }) // тело обязательно
    );
  }

  /* выгрузка страницы (закрытие, переход) */
  window.addEventListener('beforeunload', sendLogout);

  /* навигация без reload (модальные окна / partial refresh) */
  $(document).on('apexafterclosedialog apexafterrefresh', sendLogout);
})();


---

6  (Опция) процедура очистки старых логов

CREATE OR REPLACE PROCEDURE purge_old_visits IS
BEGIN
  DELETE FROM page_visit_log
   WHERE login_time < SYSTIMESTAMP - 30;    -- хранить 30 дней
  COMMIT;
END;
/

BEGIN
  DBMS_SCHEDULER.create_job(
    job_name        => 'PURGE_VISITS',
    job_type        => 'PLSQL_BLOCK',
    job_action      => 'BEGIN purge_old_visits; END;',
    repeat_interval => 'FREQ=DAILY;BYHOUR=3',
    enabled         => TRUE);
END;
/


---

Как итог работает

1. Вход на страницу → процесс вставляет строку и кладёт log_id в P_LOG_ID.


2. Пользователь закрывает вкладку / уходит → JS-обработчик отправляет
POST /ords/web_rnd/log/log-logout/<log_id> (body = x, 204 ответ не нужен).


3. ORDS-handler проставляет logout_time.


4. В таблице page_visit_log видно полное время работы пользователя.



