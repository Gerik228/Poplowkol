**Универсальная реализация логирования в APEX 23.1 с обработкой всех сценариев выхода**

---

### 1. **Создание таблицы логов**
```sql
CREATE TABLE page_visit_log (
    log_id          NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username        VARCHAR2(255),
    item_value      VARCHAR2(4000),
    login_time      TIMESTAMP,
    logout_time     TIMESTAMP
);
```

---

### 2. **Логирование входа пользователя**
**Page Process → Page Load:**
```plsql
INSERT INTO page_visit_log (username, item_value, login_time)
VALUES (
    v('APP_USER'), 
    :P_ITEM_NAME, -- Заменить на ваш Item
    LOCALTIMESTAMP
);
```

---

### 3. **Отслеживание выхода пользователя**
#### a. **JavaScript для всех сценариев выхода**
Добавьте в `Page Attributes → JavaScript → Execute when Page Loads`:
```javascript
(function() {
    let isNavigating = false;
    
    // Общая функция отправки данных
    function sendLogoutRequest(trigger) {
        const payload = {
            action: 'logout',
            itemValue: apex.item("P_ITEM_NAME").getValue(), // Заменить на ваш Item
            username: "#APP_USER",
            trigger: trigger
        };
        
        // Приоритет: fetch с keepalive
        if (navigator.sendBeacon) {
            const beacon = new Blob([JSON.stringify(payload)], {type: 'application/json'});
            navigator.sendBeacon('https://ваш_домен/apex/ваш_приемник', beacon);
        } else {
            fetch('https://ваш_домен/apex/ваш_приемник', {
                method: 'POST',
                body: JSON.stringify(payload),
                keepalive: true,
                headers: {'Content-Type': 'application/json'}
            }).catch(() => {});
        }
    }

    // Событие закрытия вкладки/браузера
    window.addEventListener('beforeunload', (e) => {
        if (!isNavigating) {
            sendLogoutRequest('beforeunload');
        }
    });

    // Событие скрытия страницы (переключение вкладок)
    document.addEventListener('visibilitychange', () => {
        if (document.visibilityState === 'hidden' && !isNavigating) {
            sendLogoutRequest('visibilitychange');
        }
    });

    // Глобальная обработка навигации в APEX
    $(document).on('apexafterclosedialog apexafterrefresh', () => {
        isNavigating = true;
        sendLogoutRequest('apex_navigation');
    });
})();
```

---

### 4. **RESTful Service для обновления logout_time**
**Shared Components → RESTful Services:**
- **URI Template:** `/log-logout`
- **Method:** POST
- **Source:**
```plsql
DECLARE
    l_body CLOB := :body_text;
BEGIN
    apex_collection_temporary_pkg.insert_logout_log(
        p_username   => JSON_VALUE(l_body, '$.username'),
        p_item_value => JSON_VALUE(l_body, '$.itemValue')
    );
END;
```

---

### 5. **PL/SQL пакет для обновления лога**
```plsql
CREATE OR REPLACE PACKAGE apex_collection_temporary_pkg IS
    PROCEDURE insert_logout_log (
        p_username   IN VARCHAR2,
        p_item_value IN VARCHAR2
    );
END;

CREATE OR REPLACE PACKAGE BODY apex_collection_temporary_pkg IS
    PROCEDURE insert_logout_log (
        p_username   IN VARCHAR2,
        p_item_value IN VARCHAR2
    ) IS
    BEGIN
        UPDATE page_visit_log
        SET logout_time = LOCALTIMESTAMP
        WHERE username = p_username
          AND item_value = p_item_value
          AND logout_time IS NULL;
    END;
END;
```

---

### 6. **Очистка старых записей**
```sql
CREATE OR REPLACE TRIGGER cleanup_old_logs
BEFORE INSERT ON page_visit_log
BEGIN
    DELETE FROM page_visit_log 
    WHERE login_time < SYSTIMESTAMP - 30; -- Хранение 30 дней
END;
```

---

### 7. **Индексы для производительности**
```sql
CREATE INDEX idx_username ON page_visit_log(username);
CREATE INDEX idx_item_value ON page_visit_log(item_value);
```

---

### 8. **Тестирование**
1. **Вход на страницу:**
   - Откройте страницу → Проверьте запись в `page_visit_log`.
2. **Закрытие вкладки:**
   - Закройте вкладку → Проверьте обновление `logout_time`.
3. **Переход на другую страницу:**
   - Используйте кнопки/ссылки → Проверьте обновление `logout_time`.
4. **Выход из системы:**
   - Нажмите кнопку "Выход" → Проверьте лог.
5. **Сбой сети:**
   - Отключите интернет → Убедитесь, что данные не теряются (используется `sendBeacon`).

---

### 9. **Особенности реализации**
- **`apexafterclosedialog` и `apexafterrefresh`:**  
  Эти события APEX срабатывают при закрытии модальных окон и обновлении областей, что позволяет отследить навигацию без полной загрузки страницы.
- **`isNavigating`:**  
  Флаг предотвращает дублирование запросов при множественных событиях выхода.
- **`sendBeacon`:**  
  Гарантирует отправку данных даже при закрытии вкладки (поддерживается всеми современными браузерами).

---

### 10. **Альтернатива: AJAX Polling (если клиентский JS недоступен)**
Добавьте в `Page Process → Submit`:
```plsql
apex_collection_temporary_pkg.insert_logout_log(
    p_username => v('APP_USER'),
    p_item_value => :P_ITEM_NAME
);
```

---

### 11. **Мониторинг**
Создайте отчет в APEX на основе `page_visit_log` с фильтрацией по:
- `username`
- `item_value`
- `login_time`
- `logout_time`

---

**Важно:**  
- Тестируйте в Safari, где `sendBeacon` может игнорировать `Blob`.
- Используйте HTTPS для `fetch/sendBeacon`, иначе запросы будут заблокированы.
- Для высоконагруженных систем рассмотрите асинхронную запись в лог через Advanced Queueing.