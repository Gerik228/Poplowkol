Отлично! Сейчас ты получишь готовый, финальный код (вариант 2), в котором Page Item вообще не используется — мы передаём faqId напрямую через x01. Это более стабильный и быстрый подход.


---

1. JavaScript (полностью готовый блок)

Вставь в "Execute when Page Loads":

const $faq = apex.jQuery;

$faq('div.t-Body').on('click', '.x-faq-btn', function () {
  const faqId = $faq(this).data('faq-id');
  const $answerBlock = $faq('#faq-answer-' + faqId);

  // Не загружаем повторно
  if ($answerBlock.data('loaded')) return;

  const $loader = $answerBlock.find('.faq-loading');
  $loader.show();

  // Запрос на сервер с передачей ID через x01
  apex.server.process("GET_FAQ_HTML", {
    x01: faqId
  }, {
    dataType: 'text',
    success: function (pData) {
      $loader.hide();
      $answerBlock.html(pData);
      $answerBlock.data('loaded', true);
    },
    error: function () {
      $loader.html('Ошибка загрузки');
    }
  });
});


---

2. PL/SQL процесс GET_FAQ_HTML (Ajax Callback)

Тип: Execute Code
(не "Function returning CLOB", обычный Execute Code, как сейчас)

declare
  l_clob clob;
begin
  select des_test
    into l_clob
    from bi_portal_faq
   where id = apex_application.g_x01;

  sys.htp.prn(l_clob);

exception
  when no_data_found then
    sys.htp.prn('Контент не найден');
end;


---

3. Шаблон компонента (без изменений)

Оставь data-faq-id="#ID#" — как у тебя:

<button type="button" class="x-faq-btn" data-faq-id="#ID#" ...>


---

4. Убедись, что Page Item P2020_FAQ_ID больше не используется

Можно его удалить или просто игнорировать

Главное — не указывать его в pageItems: в JS



---

Итог

С этим кодом:

faqId передаётся прямо в процесс

Не нужно ждать применения setValue

Ошибки ORA-01403 больше не будет, если ID есть в БД


Готов выдать .sql с примером?

