Отлично! Спасибо, что показал оригинальный jQuery-код раскрытия блоков. Это основная логика плагина, которую действительно нельзя было перезаписывать напрямую.

Мы сейчас объединим твою нативную анимацию плагина и динамическую загрузку CLOB через AJAX — без конфликта.


---

Что происходит:

Твой код:

Работает через jQuery.

Сам управляет aria-expanded, переключает плюс/минус и показывает/скрывает dd.


Мой код дублировал часть этой логики — в результате сработали 2 обработчика одновременно, и всё "сломалось".


---

Решение: оставить твой код, а загрузку HTML подключить отдельно


---

ИТОГОВОЕ РЕШЕНИЕ (корректный финальный код)

1. Оставь свой код как есть:

const $ = apex.jQuery;

$('.x-faq-dt:first')
  .parents('div.t-Body')
  .on('click', '.x-faq-btn', function () {
    const expanded = $(this).attr('aria-expanded') === 'true';
    const ddel = $(this).parent().siblings('dd');

    if (expanded) {
      ddel.css('display', 'none');
      $(this)
        .children('span.x-faq-icon-parent')
        .children('span.fa-minus')
        .css('display', 'none');
      $(this)
        .children('span.x-faq-icon-parent')
        .children('span.fa-plus')
        .css('display', 'block');
      $(this).attr('aria-expanded', 'false');
    } else {
      ddel.css('display', 'block');
      $(this)
        .children('span.x-faq-icon-parent')
        .children('span.fa-plus')
        .css('display', 'none');
      $(this)
        .children('span.x-faq-icon-parent')
        .children('span.fa-minus')
        .css('display', 'block');
      $(this).attr('aria-expanded', 'true');
    }

    apex.event.trigger(document, 'apexwindowresized');
  });


---

2. Добавь отдельный код для подгрузки CLOB

В том же разделе "Execute when Page Loads", добавь после твоего обработчика вот это:

const $faq = apex.jQuery;

$faq('div.t-Body').on('click', '.x-faq-btn', function () {
  const faqId = $faq(this).data('faq-id');
  const $answerBlock = $faq('#faq-answer-' + faqId);

  // Проверяем, если уже подгружено — не делаем ничего
  if ($answerBlock.data('loaded')) return;

  // Показываем прелоадер
  const $loader = $answerBlock.find('.faq-loading');
  $loader.show();

  // Устанавливаем Page Item
  apex.item('P2020_FAQ_ID').setValue(faqId);

  // Запрос на сервер
  apex.server.process(
    'GET_FAQ_HTML',
    {
      pageItems: 'P2020_FAQ_ID',
    },
    {
      dataType: 'text',
      success: function (pData) {
        $loader.hide();
        $answerBlock.html(pData);
        $answerBlock.data('loaded', true);
      },
      error: function () {
        $loader.html('Ошибка загрузки');
      },
    }
  );
});


---

3. Всё остальное оставить как мы делали ранее:

HTML-шаблон с id="faq-answer-#ID#" и div.faq-loading

AJAX Callback GET_FAQ_HTML

Page Item P2020_FAQ_ID



---

Теперь работает так:

Клик по вопросу — плагин раскрывает блок, показывает иконки.

Одновременно выполняется AJAX-запрос, если ранее не подгружалось.

Контент из CLOB вставляется в <dd> по id.



---

Если хочешь — могу собрать .sql экспорт страницы для импорта в твоё приложение.

Готов сделать?

