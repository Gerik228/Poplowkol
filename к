CREATE OR REPLACE PACKAGE BODY audit_pkg AS

  PROCEDURE create_audit_trigger(
    p_table_name   IN VARCHAR2,
    p_pk_column    IN VARCHAR2,
    p_title_column IN VARCHAR2 DEFAULT NULL
  ) AS
    l_sql       CLOB;
    c_cols      SYS_REFCURSOR;
    l_col_name  VARCHAR2(128);
    l_data_type VARCHAR2(128);
  BEGIN
    -- Собираем все столбцы (кроме PK и identity)
    OPEN c_cols FOR
      SELECT column_name, data_type
        FROM user_tab_columns
       WHERE table_name      = UPPER(p_table_name)
         AND column_name    <> UPPER(p_pk_column)
         AND identity_column = 'NO'
       ORDER BY column_id;

    -- Начало DDL-триггера
    l_sql := 'CREATE OR REPLACE TRIGGER TRG_AUDIT_' || UPPER(p_table_name) || '
    AFTER INSERT OR UPDATE OR DELETE ON ' || p_table_name || '
    FOR EACH ROW
    DECLARE
      v_audit_id   NUMBER;
      v_rec_id     VARCHAR2(100);
      v_rec_name   VARCHAR2(500);
      v_event_type VARCHAR2(20);
    BEGIN
      IF INSERTING THEN
        v_event_type := ''INSERT'';
        v_rec_id     := TO_CHAR(:NEW.' || p_pk_column || ');
        v_rec_name   := ' || CASE 
                             WHEN p_title_column IS NOT NULL
                             THEN 'TO_CHAR(:NEW.' || p_title_column || ')'
                             ELSE 'NULL' END || ';
      ELSIF UPDATING THEN
        v_event_type := ''UPDATE'';
        v_rec_id     := TO_CHAR(:NEW.' || p_pk_column || ');
        v_rec_name   := ' || CASE 
                             WHEN p_title_column IS NOT NULL
                             THEN 'TO_CHAR(:NEW.' || p_title_column || ')'
                             ELSE 'NULL' END || ';
      ELSIF DELETING THEN
        v_event_type := ''DELETE'';
        v_rec_id     := TO_CHAR(:OLD.' || p_pk_column || ');
        v_rec_name   := ' || CASE 
                             WHEN p_title_column IS NOT NULL
                             THEN 'TO_CHAR(:OLD.' || p_title_column || ')'
                             ELSE 'NULL' END || ';
      END IF;

      INSERT INTO audit_log(
        table_name, record_id, record_name, event_type
      ) VALUES (
        ''' || UPPER(p_table_name) || ''',
        v_rec_id, v_rec_name, v_event_type
      ) RETURNING audit_id INTO v_audit_id;';

    -- Генерация кода для каждого столбца
    LOOP
      FETCH c_cols INTO l_col_name, l_data_type;
      EXIT WHEN c_cols%NOTFOUND;
      l_sql := l_sql || '
      -- ' || l_col_name || '
      IF INSERTING THEN
        INSERT INTO audit_log_details(
          audit_id, column_name, old_value, new_value, data_type
        ) VALUES (
          v_audit_id, ''' || l_col_name || ''', NULL,
          TO_CLOB(:NEW.' || l_col_name || '), ''' || l_data_type || '''
        );
      ELSIF UPDATING THEN
        IF NVL(TO_CHAR(:OLD.' || l_col_name || '),''$$NULL$$'')
         <> NVL(TO_CHAR(:NEW.' || l_col_name || '),''$$NULL$$'') THEN
          INSERT INTO audit_log_details(
            audit_id, column_name, old_value, new_value, data_type
          ) VALUES (
            v_audit_id, ''' || l_col_name || ''',
            TO_CLOB(:OLD.' || l_col_name || '),
            TO_CLOB(:NEW.' || l_col_name || '),
            ''' || l_data_type || '''
          );
        END IF;
      ELSIF DELETING THEN
        INSERT INTO audit_log_details(
          audit_id, column_name, old_value, new_value, data_type
        ) VALUES (
          v_audit_id, ''' || l_col_name || ''',
          TO_CLOB(:OLD.' || l_col_name || '), NULL, ''' || l_data_type || '''
        );
      END IF;';
    END LOOP;
    CLOSE c_cols;

    l_sql := l_sql || '
    EXCEPTION WHEN OTHERS THEN NULL;
    END;';

    -- Удаляем старый триггер, если есть
    BEGIN
      EXECUTE IMMEDIATE 'DROP TRIGGER TRG_AUDIT_' || UPPER(p_table_name);
    EXCEPTION WHEN OTHERS THEN NULL;
    END;

    -- Создаём новый триггер
    EXECUTE IMMEDIATE l_sql;
  END create_audit_trigger;

END audit_pkg;
/
