напиши заново всю инструкцию с учетом особенностей платформы и версии платформы 23.1. 
и чтобы можно было применить такое же логирование и к другим таблицам т.е. в родительском журнале указывалось в одном атрибуте наименование таблицы

# Система аудита изменений данных в Oracle APEX 23.1 — Полная инструкция

## Обзор решения

В Oracle APEX 23.1 с учетом современных возможностей платформы и требований к унифицированному аудиту в Oracle Database 23.1, представляю комплексную систему аудита изменений данных. Система реализует двухуровневое журналирование и может применяться к любым таблицам в вашей схеме[1][2].

## Особенности Oracle APEX 23.1

### Новый Object Browser
Oracle APEX 23.1 представляет модернизированный Object Browser с улучшенными возможностями создания объектов базы данных[1][2]. Ключевые особенности:

- **Упрощенные мастера создания объектов** — более интуитивный интерфейс для создания таблиц, триггеров и пакетов[2]
- **Единое дерево объектов** — просмотр и фильтрация всех типов объектов в одном месте[2]
- **Улучшенный редактор кода** — поддержка автодополнения и подсветки синтаксиса[2]

### SQL Workshop
В версии 23.1 SQL Workshop получил значительные улучшения для работы с объектами базы данных[1][3]:

- **Прямой доступ к SQL Developer Web** из меню SQL Workshop (требует ORDS 23.1)[2][4]
- **Улучшенная интеграция** с процессами страниц и фоновым выполнением кода[5]

## Архитектура системы аудита

### Структура таблиц

**Родительская таблица журнала (AUDIT_LOG):**
```sql
-- Создается через SQL Workshop > SQL Commands
CREATE TABLE audit_log (
    audit_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    table_name VARCHAR2(128) NOT NULL,           -- Наименование таблицы
    record_id VARCHAR2(100) NOT NULL,            -- ID записи
    record_name VARCHAR2(500),                   -- Наименование записи
    event_type VARCHAR2(20) NOT NULL,            -- INSERT, UPDATE, DELETE
    event_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    user_name VARCHAR2(100) DEFAULT COALESCE(APEX_APPLICATION.G_USER, USER),
    session_id NUMBER DEFAULT SYS_CONTEXT('USERENV', 'SESSIONID'),
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

**Детальная таблица изменений (AUDIT_LOG_DETAILS):**
```sql
-- Создается через SQL Workshop > SQL Commands  
CREATE TABLE audit_log_details (
    detail_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    audit_id NUMBER NOT NULL,                    -- Связь с родительской записью
    column_name VARCHAR2(128) NOT NULL,          -- Имя измененного атрибута
    old_value CLOB,                              -- Старое значение
    new_value CLOB,                              -- Новое значение
    data_type VARCHAR2(50),                      -- Тип данных
    change_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    user_name VARCHAR2(100) DEFAULT COALESCE(APEX_APPLICATION.G_USER, USER),
    CONSTRAINT fk_audit_details_log 
        FOREIGN KEY (audit_id) REFERENCES audit_log(audit_id)
);

-- Индексы для оптимизации
CREATE INDEX idx_audit_log_table_date ON audit_log(table_name, event_date);
CREATE INDEX idx_audit_log_record_id ON audit_log(record_id);
CREATE INDEX idx_audit_details_audit_id ON audit_log_details(audit_id);
```

## Универсальный пакет аудита

Создайте пакет через **SQL Workshop > Object Browser > Create Package**[6]:

```sql
CREATE OR REPLACE PACKAGE audit_pkg AS
    -- Процедура для записи основного события аудита
    PROCEDURE log_audit_event(
        p_table_name IN VARCHAR2,
        p_record_id IN VARCHAR2,
        p_record_name IN VARCHAR2,
        p_event_type IN VARCHAR2,
        p_audit_id OUT NUMBER
    );
    
    -- Процедура для записи детальных изменений
    PROCEDURE log_column_change(
        p_audit_id IN NUMBER,
        p_column_name IN VARCHAR2,
        p_old_value IN CLOB,
        p_new_value IN CLOB,
        p_data_type IN VARCHAR2 DEFAULT 'VARCHAR2'
    );
    
    -- Функция автоматической генерации универсального триггера
    FUNCTION generate_audit_trigger(
        p_table_name IN VARCHAR2,
        p_key_column IN VARCHAR2,
        p_name_column IN VARCHAR2 DEFAULT NULL
    ) RETURN CLOB;
    
    -- Процедура применения аудита к таблице
    PROCEDURE apply_audit_to_table(
        p_table_name IN VARCHAR2,
        p_key_column IN VARCHAR2,
        p_name_column IN VARCHAR2 DEFAULT NULL
    );
    
END audit_pkg;
/
```

**Тело пакета:**
```sql
CREATE OR REPLACE PACKAGE BODY audit_pkg AS
    
    PROCEDURE log_audit_event(
        p_table_name IN VARCHAR2,
        p_record_id IN VARCHAR2,
        p_record_name IN VARCHAR2,
        p_event_type IN VARCHAR2,
        p_audit_id OUT NUMBER
    ) AS
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        INSERT INTO audit_log (
            table_name,         -- Добавлено поле наименования таблицы
            record_id, 
            record_name, 
            event_type
        ) VALUES (
            UPPER(p_table_name), -- Всегда указывается таблица
            p_record_id,
            p_record_name,
            UPPER(p_event_type)
        ) RETURNING audit_id INTO p_audit_id;
        
        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            -- Логирование в APEX Debug
            APEX_DEBUG.ERROR('Audit Event Error: ' || SQLERRM);
            RAISE;
    END log_audit_event;
    
    PROCEDURE log_column_change(
        p_audit_id IN NUMBER,
        p_column_name IN VARCHAR2,
        p_old_value IN CLOB,
        p_new_value IN CLOB,
        p_data_type IN VARCHAR2 DEFAULT 'VARCHAR2'
    ) AS
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        -- Записываем изменение только если значения различаются
        IF (p_old_value IS NULL AND p_new_value IS NOT NULL) OR
           (p_old_value IS NOT NULL AND p_new_value IS NULL) OR
           (p_old_value != p_new_value) THEN
            
            INSERT INTO audit_log_details (
                audit_id,
                column_name,
                old_value,
                new_value,
                data_type
            ) VALUES (
                p_audit_id,
                UPPER(p_column_name),
                p_old_value,
                p_new_value,
                p_data_type
            );
        END IF;
        
        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            APEX_DEBUG.ERROR('Audit Detail Error: ' || SQLERRM);
            RAISE;
    END log_column_change;
    
    FUNCTION generate_audit_trigger(
        p_table_name IN VARCHAR2,
        p_key_column IN VARCHAR2,
        p_name_column IN VARCHAR2 DEFAULT NULL
    ) RETURN CLOB AS
        l_trigger_code CLOB;
        l_columns_cursor SYS_REFCURSOR;
        l_column_name VARCHAR2(128);
        l_data_type VARCHAR2(128);
        l_trigger_name VARCHAR2(128);
    BEGIN
        l_trigger_name := 'TRG_AUDIT_' || UPPER(p_table_name);
        
        -- Базовая структура триггера
        l_trigger_code := 'CREATE OR REPLACE TRIGGER ' || l_trigger_name || '
    AFTER INSERT OR UPDATE OR DELETE ON ' || p_table_name || '
    FOR EACH ROW
DECLARE
    v_audit_id NUMBER;
    v_record_id VARCHAR2(100);
    v_record_name VARCHAR2(500);
    v_event_type VARCHAR2(20);
BEGIN
    -- Определяем тип операции и ключевые значения
    IF INSERTING THEN
        v_event_type := ''INSERT'';
        v_record_id := TO_CHAR(:NEW.' || p_key_column || ');
        v_record_name := ' || CASE WHEN p_name_column IS NOT NULL 
                                    THEN 'TO_CHAR(:NEW.' || p_name_column || ')' 
                                    ELSE 'NULL' END || ';
    ELSIF UPDATING THEN
        v_event_type := ''UPDATE'';
        v_record_id := TO_CHAR(:NEW.' || p_key_column || ');
        v_record_name := ' || CASE WHEN p_name_column IS NOT NULL 
                                    THEN 'TO_CHAR(:NEW.' || p_name_column || ')' 
                                    ELSE 'NULL' END || ';
    ELSIF DELETING THEN
        v_event_type := ''DELETE'';
        v_record_id := TO_CHAR(:OLD.' || p_key_column || ');
        v_record_name := ' || CASE WHEN p_name_column IS NOT NULL 
                                    THEN 'TO_CHAR(:OLD.' || p_name_column || ')' 
                                    ELSE 'NULL' END || ';
    END IF;
    
    -- Записываем основное событие аудита
    audit_pkg.log_audit_event(
        p_table_name => ''' || p_table_name || ''',
        p_record_id => v_record_id,
        p_record_name => v_record_name,
        p_event_type => v_event_type,
        p_audit_id => v_audit_id
    );';

        -- Добавляем проверки для каждого столбца
        OPEN l_columns_cursor FOR
            SELECT column_name, data_type
            FROM user_tab_columns
            WHERE table_name = UPPER(p_table_name)
            ORDER BY column_id;
        
        LOOP
            FETCH l_columns_cursor INTO l_column_name, l_data_type;
            EXIT WHEN l_columns_cursor%NOTFOUND;
            
            l_trigger_code := l_trigger_code || '
    
    -- Проверка изменений в столбце ' || l_column_name || '
    IF INSERTING THEN
        audit_pkg.log_column_change(
            p_audit_id => v_audit_id,
            p_column_name => ''' || l_column_name || ''',
            p_old_value => NULL,
            p_new_value => TO_CLOB(:NEW.' || l_column_name || '),
            p_data_type => ''' || l_data_type || '''
        );
    ELSIF UPDATING THEN
        audit_pkg.log_column_change(
            p_audit_id => v_audit_id,
            p_column_name => ''' || l_column_name || ''',
            p_old_value => TO_CLOB(:OLD.' || l_column_name || '),
            p_new_value => TO_CLOB(:NEW.' || l_column_name || '),
            p_data_type => ''' || l_data_type || '''
        );
    ELSIF DELETING THEN
        audit_pkg.log_column_change(
            p_audit_id => v_audit_id,
            p_column_name => ''' || l_column_name || ''',
            p_old_value => TO_CLOB(:OLD.' || l_column_name || '),
            p_new_value => NULL,
            p_data_type => ''' || l_data_type || '''
        );
    END IF;';
        END LOOP;
        
        CLOSE l_columns_cursor;
        
        l_trigger_code := l_trigger_code || '
        
EXCEPTION
    WHEN OTHERS THEN
        -- Логируем ошибку в APEX Debug
        APEX_DEBUG.ERROR(''Audit Trigger Error on ' || p_table_name || ': '' || SQLERRM);
        RAISE;
END;';
        
        RETURN l_trigger_code;
    END generate_audit_trigger;
    
    PROCEDURE apply_audit_to_table(
        p_table_name IN VARCHAR2,
        p_key_column IN VARCHAR2,
        p_name_column IN VARCHAR2 DEFAULT NULL
    ) AS
        l_trigger_sql CLOB;
    BEGIN
        -- Генерируем код триггера
        l_trigger_sql := generate_audit_trigger(
            p_table_name => p_table_name,
            p_key_column => p_key_column,
            p_name_column => p_name_column
        );
        
        -- Выполняем создание триггера
        EXECUTE IMMEDIATE l_trigger_sql;
        
        APEX_DEBUG.INFO('Audit trigger created for table: ' || p_table_name);
    EXCEPTION
        WHEN OTHERS THEN
            APEX_DEBUG.ERROR('Failed to apply audit to table ' || p_table_name || ': ' || SQLERRM);
            RAISE;
    END apply_audit_to_table;
    
END audit_pkg;
/
```

## Представления для работы с аудитом

Создайте представления через **SQL Workshop > Object Browser > Create View**[6]:

```sql
-- Полная информация об изменениях с указанием таблицы
CREATE OR REPLACE VIEW v_audit_full AS
SELECT 
    al.audit_id,
    al.table_name,                    -- Наименование таблицы
    al.record_id,
    al.record_name,
    al.event_type,
    al.event_date,
    al.user_name as event_user,
    ald.detail_id,
    ald.column_name,
    ald.old_value,
    ald.new_value,
    ald.data_type,
    ald.change_date
FROM audit_log al
LEFT JOIN audit_log_details ald ON al.audit_id = ald.audit_id
ORDER BY al.event_date DESC, ald.detail_id;

-- Сводка изменений по таблицам
CREATE OR REPLACE VIEW v_audit_summary AS
SELECT 
    table_name,                      -- Группировка по таблицам
    event_type,
    COUNT(*) as event_count,
    MIN(event_date) as first_event,
    MAX(event_date) as last_event,
    COUNT(DISTINCT user_name) as unique_users
FROM audit_log
GROUP BY table_name, event_type
ORDER BY table_name, event_type;

-- Представление последних изменений по таблицам
CREATE OR REPLACE VIEW v_audit_recent AS
SELECT 
    table_name,
    record_id,
    record_name,
    event_type,
    event_date,
    user_name,
    COUNT(DISTINCT ald.column_name) as columns_changed
FROM audit_log al
LEFT JOIN audit_log_details ald ON al.audit_id = ald.audit_id
WHERE event_date >= SYSDATE - 7  -- Последняя неделя
GROUP BY table_name, record_id, record_name, event_type, event_date, user_name
ORDER BY event_date DESC;
```

## Применение аудита к таблицам

### Простое применение через SQL Commands

```sql
-- Применение аудита к таблице EMPLOYEES
BEGIN
    audit_pkg.apply_audit_to_table(
        p_table_name => 'EMPLOYEES',
        p_key_column => 'EMPLOYEE_ID',
        p_name_column => 'LAST_NAME'  -- Опционально
    );
END;
/

-- Применение аудита к таблице DEPARTMENTS  
BEGIN
    audit_pkg.apply_audit_to_table(
        p_table_name => 'DEPARTMENTS',
        p_key_column => 'DEPARTMENT_ID',
        p_name_column => 'DEPARTMENT_NAME'
    );
END;
/

-- Применение аудита к таблице без поля наименования
BEGIN
    audit_pkg.apply_audit_to_table(
        p_table_name => 'ORDERS',
        p_key_column => 'ORDER_ID'
        -- p_name_column не указываем
    );
END;
/
```

### Массовое применение аудита

```sql
-- Применение аудита к нескольким таблицам
DECLARE
    TYPE table_config_t IS RECORD (
        table_name VARCHAR2(128),
        key_column VARCHAR2(128),
        name_column VARCHAR2(128)
    );
    
    TYPE table_list_t IS TABLE OF table_config_t;
    
    l_tables table_list_t := table_list_t(
        table_config_t('EMPLOYEES', 'EMPLOYEE_ID', 'LAST_NAME'),
        table_config_t('DEPARTMENTS', 'DEPARTMENT_ID', 'DEPARTMENT_NAME'),
        table_config_t('PRODUCTS', 'PRODUCT_ID', 'PRODUCT_NAME'),
        table_config_t('ORDERS', 'ORDER_ID', NULL),
        table_config_t('CUSTOMERS', 'CUSTOMER_ID', 'COMPANY_NAME')
    );
BEGIN
    FOR i IN 1..l_tables.COUNT LOOP
        audit_pkg.apply_audit_to_table(
            p_table_name => l_tables(i).table_name,
            p_key_column => l_tables(i).key_column,
            p_name_column => l_tables(i).name_column
        );
        
        DBMS_OUTPUT.PUT_LINE('Аудит применен к таблице: ' || l_tables(i).table_name);
    END LOOP;
    
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Ошибка: ' || SQLERRM);
        RAISE;
END;
/
```

## Интеграция с Oracle APEX 23.1

### Настройка контекста пользователя

Для корректной работы аудита в APEX создайте **Application Process** с точкой выполнения "On New Session"[7]:

```sql
-- Application Process: Set Audit Context
BEGIN
    -- Устанавливаем контекст APEX пользователя для аудита
    APEX_UTIL.SET_SESSION_STATE('APP_USER', :APP_USER);
    
    -- Дополнительная информация для аудита
    APEX_UTIL.SET_SESSION_STATE('APP_SESSION', :APP_SESSION);
    APEX_UTIL.SET_SESSION_STATE('APP_ID', :APP_ID);
END;
```

### Страницы для просмотра аудита

**1. Страница общего обзора аудита:**
- Создайте **Interactive Report** на основе представления `v_audit_summary`
- Добавьте фильтры по таблицам, типам событий, датам
- Используйте **Template Components**[4] для улучшения визуализации

**2. Страница детального просмотра изменений:**
- **Interactive Report** на основе представления `v_audit_full`
- Реализуйте drill-down функциональность
- Добавьте возможность экспорта данных аудита

**Пример SQL для Interactive Report:**
```sql
SELECT 
    table_name as "Таблица",
    record_name as "Запись", 
    event_type as "Операция",
    event_date as "Дата",
    user_name as "Пользователь",
    column_name as "Поле",
    old_value as "Старое значение",
    new_value as "Новое значение"
FROM v_audit_full
WHERE event_date >= :P1_DATE_FROM
  AND event_date <= :P1_DATE_TO
  AND (:P1_TABLE_NAME IS NULL OR table_name = :P1_TABLE_NAME)
ORDER BY event_date DESC
```

## Особенности Oracle Database 23.1 и унифицированный аудит

### Обязательный унифицированный аудит

В Oracle Database 23ai традиционный аудит отключен по умолчанию[8][9][10]. Система автоматически использует унифицированный аудит, который обеспечивает:

- **Консолидированный аудит-трейл** в схеме AUDSYS[11]
- **Улучшенную производительность** записи аудита[12]
- **Защиту от несанкционированного доступа** к данным аудита[11]

### Дополнительные настройки для совместимости

```sql
-- Проверка состояния унифицированного аудита
SELECT VALUE FROM V$OPTION WHERE PARAMETER = 'Unified Auditing';

-- Настройка политик аудита для административных операций
CREATE AUDIT POLICY apex_admin_audit
    ACTIONS CREATE TABLE, DROP TABLE, CREATE TRIGGER, DROP TRIGGER
    WHEN 'SYS_CONTEXT(''USERENV'', ''CLIENT_PROGRAM'') LIKE ''%APEX%'''
    EVALUATE PER SESSION;

-- Активация политики для схемы
AUDIT POLICY apex_admin_audit;
```

## Управление производительностью и обслуживание

### Партиционирование таблиц аудита

```sql
-- Для больших объемов данных
ALTER TABLE audit_log 
MODIFY PARTITION BY RANGE (event_date) 
INTERVAL (NUMTOYMINTERVAL(1, 'MONTH'))
(PARTITION p_initial VALUES LESS THAN (DATE '2025-01-01'));

ALTER TABLE audit_log_details
MODIFY PARTITION BY RANGE (change_date)
INTERVAL (NUMTOYMINTERVAL(1, 'MONTH'))
(PARTITION p_initial VALUES LESS THAN (DATE '2025-01-01'));
```

### Процедуры обслуживания

```sql
-- Пакет обслуживания аудита
CREATE OR REPLACE PACKAGE audit_maintenance_pkg AS
    -- Очистка старых записей
    PROCEDURE cleanup_audit_data(
        p_retention_days IN NUMBER DEFAULT 365
    );
    
    -- Статистика аудита
    PROCEDURE gather_audit_stats;
    
    -- Архивирование данных
    PROCEDURE archive_audit_data(
        p_archive_days IN NUMBER DEFAULT 90
    );
END;
/
```

### Фоновые процессы APEX 23.1

Используйте новые **Execution Chains**[5][13] для фонового обслуживания:

```sql
-- Процесс очистки аудита (фоновый)
BEGIN
    -- Создание Execution Chain процесса в APEX
    audit_maintenance_pkg.cleanup_audit_data(p_retention_days => 365);
    audit_maintenance_pkg.gather_audit_stats;
    
    APEX_DEBUG.INFO('Audit maintenance completed');
END;
```

## Практические примеры использования

### Применение к таблице заказов

```sql
-- Таблица ORDERS
BEGIN
    audit_pkg.apply_audit_to_table(
        p_table_name => 'ORDERS',
        p_key_column => 'ORDER_ID',
        p_name_column => 'ORDER_NUMBER'
    );
END;
/

-- После этого все изменения в ORDERS будут записываться:
UPDATE ORDERS SET STATUS = 'SHIPPED' WHERE ORDER_ID = 123;
-- Результат: запись в audit_log с table_name = 'ORDERS'
-- и детали в audit_log_details для поля STATUS
```

### Просмотр изменений по конкретной таблице

```sql
-- Все изменения в таблице EMPLOYEES за последний месяц
SELECT 
    record_name as "Сотрудник",
    event_type as "Операция", 
    event_date as "Дата",
    user_name as "Пользователь",
    COUNT(DISTINCT column_name) as "Измененных полей"
FROM v_audit_full 
WHERE table_name = 'EMPLOYEES' 
  AND event_date >= SYSDATE - 30
GROUP BY record_name, event_type, event_date, user_name
ORDER BY event_date DESC;
```

## Заключение

Данная система аудита, адаптированная для Oracle APEX 23.1, обеспечивает:

1. **Универсальность** — применима к любым таблицам в схеме
2. **Централизованность** — единая система журналирования с указанием таблиц
3. **Масштабируемость** — поддержка больших объемов данных
4. **Совместимость** — оптимизирована для Oracle Database 23.1 и унифицированного аудита
5. **Простоту применения** — автоматизированное создание триггеров
6. **Интеграцию с APEX** — использование современных возможностей платформы

Система готова к использованию в продуктивной среде и легко расширяется для специфических потребностей вашего приложения[1][2][4].

Цитаты:
[1] Oracle APEX 23.1 – Nuevo Explorador de Objetos - Kiú https://kiusi.com/en/oracle-apex-23-1-nuevo-explorador-de-objetos/
[2] [PDF] Oracle® APEX - SQL Workshop Guide https://docs.oracle.com/en/database/oracle/apex/23.1/aeutl/oracle-apex-sql-workshop-guide.pdf
[3] Exploring Oracle APEX Development Tools - apexvarsity https://apexvarsity.com/exploring-oracle-apex-development-tools
[4] 2 New Features - Oracle Help Center https://docs.oracle.com/en/database/oracle/apex/23.1/htmrn/new-features.html
[5] APEX Execution Chain Process - DSP Blog https://content.dsp.co.uk/apex/apex-execution-chain-process
[6] Managing Database Objects with Object Browser - Oracle Help Center https://docs.oracle.com/en/database/oracle/apex/23.1/aeutl/managing-db-objects-with-object-browser.html
[7] Oracle APEX user on Oracle Trigger - Stack Overflow https://stackoverflow.com/questions/64014867/oracle-apex-user-on-oracle-trigger
[8] Streamlining the transition to Unified Auditing - YouTube https://www.youtube.com/watch?v=oRr7rLTGrug
[9] Oracle Database New Features https://docs.oracle.com/en/database/oracle/oracle-database/23/nfcoa/audit.html
[10] Unified Auditing - dbi services https://www.dbi-services.com/blog/tag/unified-auditing/
[11] [PDF] Oracle Database Unified Audit Best Practice Guidelines https://www.oracle.com/a/tech/docs/dbsec/unified-audit-best-practice-guidelines.pdf
[12] How to migrate to Unified Auditing? - Upgrade your Database - NOW! https://mikedietrichde.com/2015/02/03/how-to-migrate-to-unified-auditing/
[13] Oracle APEX 23.1 - Page Processes Enhancements https://lmoreaux.hashnode.dev/oracle-apex-231-page-processes-enhancements
[14] 23 Introduction to Auditing - Oracle Help Center https://docs.oracle.com/en/database/oracle/oracle-database/18/dbseg/introduction-to-auditing.html
[15] Oracle APEX CI/CD: Step-by-step guide aligned to the ... - Pretius https://pretius.com/blog/oracle-apex-ci-cd/
[16] [PDF] Oracle® APEX - App Builder User's Guide https://docs.oracle.com/en/database/oracle/apex/23.1/htmdb/oracle-apex-app-builder-users-guide.pdf
[17] Oracle Apex 23.1 - a deep dive into the biggest new features https://www.youtube.com/watch?v=Hi4KVHYdPBU
[18] Oracle APEX 23.1 . Forms - Populate items on page load https://forums.oracle.com/ords/apexds/post/oracle-apex-23-1-forms-populate-items-on-page-load-6601
[19] Oracle APEX new features – the low-code platform keeps evolving https://pretius.com/blog/oracle-apex-new-features/
[20] 5.4.8 Configuring Quick SQL Settings - Database - Oracle Help Center https://docs.oracle.com/en/database/oracle/apex/23.1/aeutl/configuring-quick-sql-settings.html
[21] [PDF] Oracle® APEX - Installation Guide https://docs.oracle.com/en/database/oracle/apex/23.1/htmig/oracle-apex-installation-guide.pdf
[22] DB Security - Unified Auditing - Oracle APEX https://apexapps.oracle.com/pls/apex/dbpm/r/livelabs/view-workshop?wid=702
[23] Oracle APEX Blog https://content.dsp.co.uk/apex/all
[24] Simplify your validation processes with Oracle APEX 23.1 - SQORUS https://www.sqorus.com/en/simplify-your-validation-processes-with-oracle-apex/
[25] Oracle APEX - best practices - GGS IT Consulting https://ggsitc.com/blog/oracle-apex-best-practices
[26] What's New in Oracle APEX 23.1 https://apex.oracle.com/en/platform/features/whats-new-231/
[27] 32 Administering the Audit Trail - Database - Oracle Help Center https://docs.oracle.com/en/database/oracle/oracle-database/23/dbseg/administering-the-audit-trail.html
[28] Mandatory Auditing - Oracle 12c Always-On-Auditing - Integrigy https://www.integrigy.com/oracle-security-blog/mandatory-auditing-oracle-12c-always-auditing
[29] Object Browser in Oracle APEX - YouTube https://www.youtube.com/watch?v=anTNJ-yapQ0
[30] 10. How to add Validation using Trigger in Oracle Apex ... - YouTube https://www.youtube.com/watch?v=udqBrI8XhYU
[31] Column-Level Auditing in Oracle: audit_condition Explained https://dincosman.com/2024/11/10/fga-audit-condition/
[32] 7.2 Enabling REST Objects - Oracle Help Center https://docs.oracle.com/en/database/oracle/apex/23.1/aeutl/enabling-rest-objects-from-object-browser.html
[33] Methods on Tables and Beyond – Auto-generation of code for APEX ... https://content.dsp.co.uk/apex/methods-on-tables-and-beyond-auto-generation-of-code-for-apex-applications
[34] generic trigger to capture table data for audit in postgres https://stackoverflow.com/questions/49494712/generic-trigger-to-capture-table-data-for-audit-in-postgres/49514689
[35] 3.12.7 Managing Workspace to Schema Assignments https://docs.oracle.com/en/database/oracle/apex/23.2/aeadm/managing-workspace-to-schema-assignments.html
[36] Call PL/SQL APIs Declaratively from APEX Using the Invoke API ... https://blog.cloudnueva.com/apex-invoke-api-processes
[37] plsql - generic triggers in oracle - Stack Overflow https://stackoverflow.com/questions/58623211/generic-triggers-in-oracle
[38] 3.15.5 Managing Workspace to Schema Assignments https://docs.oracle.com/en/database/oracle/application-express/20.1/aeadm/managing-workspace-to-schema-assignments.html
[39] Best Practices for Auditing Changes with Oracle SQL Triggers https://moldstud.com/articles/p-best-practices-for-auditing-changes-with-oracle-sql-triggers
[40] Managing Workspace to Schema Assignments https://dde.age.ohio.gov/i/doc/AEADM/adm_schema_assign.htm
[41] Performance differences between normal and generic audit triggers https://www.cybertec-postgresql.com/en/performance-differences-between-normal-and-generic-audit-triggers/
[42] App Builder User's Guide - Oracle Help Center https://docs.oracle.com/en/database/oracle/apex/24.2/htmdb/understanding-workspace-management.html
[43] Best practices on Packages - Noob here - Oracle Forums https://forums.oracle.com/ords/apexds/post/best-practices-noob-here-4709
[44] Implementing Enhanced Table Auditing in the Oracle Dev Gym http://stevenfeuersteinonplsql.blogspot.com/2020/09/implementing-enhanced-table-auditing-in.html
[45] How to add schema in workspace || Oracle Apex - YouTube https://www.youtube.com/watch?v=R5UVD4Y-tEg
[46] Two Methods for Setting an APEX Authentication Scheme at Run-Time https://blog.cloudnueva.com/setting-an-apex-authentication-scheme-at-run-time
[47] Create an Audit trigger | Tek-Tips https://www.tek-tips.com/threads/create-an-audit-trigger.1590630/
[48] 6.11 Creating a Workspace and Adding APEX Users https://docs.oracle.com/en/database/oracle/apex/24.2/htmig/creating-workspace-and-adding-apex-users.html
[49] Automatically generate audit capture for tables - Connor McDonald https://connor-mcdonald.com/2020/08/04/level-up-your-audit-trigger-game/
